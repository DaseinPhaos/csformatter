using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.CSharp.Formatting;

namespace csformatter
{
class Program
{
static void Main(string[] args)
{
var cliArgs = EntryPoint.Cli.Parse<CliArgs>(args);
var workspace = new AdhocWorkspace();
var project = workspace.AddProject("Debug Project", LanguageNames.CSharp);
SourceText sourceText;
using (var fs = System.IO.File.OpenRead(cliArgs.SrcFileName))
{
sourceText = SourceText.From(fs);
}
var doc = workspace.AddDocument(project.Id, cliArgs.SrcFileName, sourceText);

var formatted = Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(doc).Result;

formatted.TryGetText(out var formattedSrc);

using (var os = System.IO.File.OpenWrite(cliArgs.DstFileName))
using (var tw = new System.IO.StreamWriter(os))
{
formattedSrc.Write(tw);
}
}

class CliArgs : EntryPoint.BaseCliArguments
{
public CliArgs() : base("??? wtf") { }

[EntryPoint.Required]
[EntryPoint.Operand(Position: 1)]
[EntryPoint.Help("Src File Name")]
public string SrcFileName { get; set; }

[EntryPoint.Required]
[EntryPoint.Operand(Position: 2)]
[EntryPoint.Help("Dst File Name")]
public string DstFileName { get; set; }
}

// class CliCmds : EntryPoint.BaseCliCommands
// {
//     public void Format(string[] args)
//     {

//     }
// }
}
}
